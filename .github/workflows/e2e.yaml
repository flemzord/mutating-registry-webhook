name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  KIND_VERSION: v0.20.0
  KUBERNETES_VERSION: v1.28.0

jobs:
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Setup Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Create Kind cluster
      run: |
        cat <<EOF | kind create cluster --config=-
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          image: kindest/node:${KUBERNETES_VERSION}
        EOF

    - name: Install cert-manager
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
        kubectl wait --for=condition=Available --timeout=300s deployment --all -n cert-manager

    - name: Build and load Docker image
      run: |
        make docker-build IMG=mutating-registry-webhook:e2e
        kind load docker-image mutating-registry-webhook:e2e

    - name: Install CRDs
      run: make install

    - name: Deploy controller
      run: |
        make deploy IMG=mutating-registry-webhook:e2e
        kubectl wait --for=condition=Available --timeout=300s deployment --all -n mutating-registry-webhook-system

    - name: Create test registry rewrite rule
      run: |
        kubectl apply -f config/samples/dev_v1alpha1_registryrewriterule.yaml
        sleep 5

    - name: Test webhook
      run: |
        # Create a test pod
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Pod
        metadata:
          name: test-pod
          namespace: default
        spec:
          containers:
          - name: nginx
            image: nginx:latest
        EOF
        
        # Wait for pod to be created
        kubectl wait --for=condition=Ready --timeout=30s pod/test-pod
        
        # Check if image was rewritten
        ACTUAL_IMAGE=$(kubectl get pod test-pod -o jsonpath='{.spec.containers[0].image}')
        echo "Actual image: $ACTUAL_IMAGE"
        
        if [[ ! "$ACTUAL_IMAGE" =~ "amazonaws.com" ]]; then
          echo "ERROR: Image was not rewritten!"
          kubectl describe pod test-pod
          exit 1
        fi
        
        echo "SUCCESS: Image was correctly rewritten!"

    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Controller logs ==="
        kubectl logs -n mutating-registry-webhook-system deployment/mutating-registry-webhook-controller-manager
        echo "=== Events ==="
        kubectl get events --all-namespaces --sort-by='.lastTimestamp'